public class Solution {

    public static int reversePairs(int[] arr) {
        int n = arr.length;
        return mergeSort(arr, 0, n - 1);
    }

    private static void merge(int[] arr, int low, int mid, int high) {
        int[] temp = new int[high - low + 1]; // temporary array
        int left = low;      // starting index of the left half of arr
        int right = mid + 1;   // starting index of the right half of arr
        int index = 0;

        // storing elements in the temporary array in a sorted manner
        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp[index++] = arr[left++];
            } else {
                temp[index++] = arr[right++];
            }
        }

        // if elements on the left half are still left
        while (left <= mid) {
            temp[index++] = arr[left++];
        }

        // if elements on the right half are still left
        while (right <= high) {
            temp[index++] = arr[right++];
        }

        // transferring all elements from temporary to arr
        System.arraycopy(temp, 0, arr, low, temp.length);
    }

    private static int countPairs(int[] arr, int low, int mid, int high) {
        int right = mid + 1;
        int cnt = 0;

        for (int i = low; i <= mid; i++) {
            while (right <= high && arr[i] / 2.0 > arr[right]) {
                right++;
            }
            cnt += (right - (mid + 1));
        }

        return cnt;
    }

    private static int mergeSort(int[] arr, int low, int high) {
        int cnt = 0;
        if (low < high) {
            int mid = (low + high) / 2;
            cnt += mergeSort(arr, low, mid);  // left half
            cnt += mergeSort(arr, mid + 1, high); // right half
            cnt += countPairs(arr, low, mid, high); // count pairs across halves
            merge(arr, low, mid, high);  // merging sorted halves
        }
        return cnt;
    }

    public static void main(String[] args) {
        int[] nums = {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647};
        int cnt = reversePairs(nums);
        System.out.println("The number of reverse pair is: " + cnt);
    }
}
