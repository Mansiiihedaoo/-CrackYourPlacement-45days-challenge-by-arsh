/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static ListNode FindMiddle( ListNode head){ //finds mid of ll
        ListNode slow= head;
        ListNode fast= head.next; // to return first mid
        while( fast != null  && fast.next != null){
            slow  = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
// MERGE TWO SORTED LIST LC
    public static ListNode MergeTwoLL(ListNode list1, ListNode list2){

        ListNode dummy = new ListNode(-1);
        ListNode temp= dummy;
        while(list1 != null && list2 != null){
            if(list1.val <= list2.val){
                temp.next =list1;
                list1=list1.next;
                temp=temp.next;
            }else{
                temp.next =list2;
                list2=list2.next;
                temp=temp.next;
            }
        }
        if(list1 != null) temp.next=list1;
        if(list2 != null) temp.next=list2;
        
        return dummy.next;
    }

    public ListNode sortList(ListNode head) {
        // if empty or single node--- already sorted
        if(head==null || head.next==null) return head;
        
        ListNode middle = FindMiddle(head);
        ListNode leftHead=head;
        ListNode rightHead= middle.next;
        middle.next=null;

        leftHead = sortList(leftHead);
        rightHead = sortList(rightHead);

        return MergeTwoLL(leftHead ,rightHead);
    }
    
}
