class Solution {
    public int splitArray(int[] nums, int k) {
        int n= nums.length;
        int low= 0;
        int high=0;
        //to find low & high
        for(int i=0;i<n;i++){
           low=Math.max(low,nums[i]); // max
           high+= nums[i]; // summation
        }
        while(low<= high){
            int mid =(low+high)/2;
            if( countPartions(nums,mid) > k){
                low= mid+1;
            }else{
                high=mid -1;
            }
        }
        return low; 
    }
    public static int countPartions( int[] nums, int maxSum ){
        int n= nums.length;
        int partitions=1;
        long subarraySum=0;
        for(int i=0;i<n;i++){
            if (subarraySum + nums[i] <= maxSum) {
                //insert element to current subarray
                subarraySum += nums[i];
            } else {
                //insert element to next subarray
                partitions++;
                subarraySum = nums[i];
            }
        }
        return partitions;
        
    }
}
