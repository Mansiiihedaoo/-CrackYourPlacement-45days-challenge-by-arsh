class Solution {
    public String minWindow(String s, String t) {
        if(s.length()==0 || s.length() < t.length()) return "";
        HashMap<Character, Integer> hm = new HashMap<>();
        //create and update HashMap
        for(char c: t.toCharArray()){
            if(hm.containsKey(c)){
                hm.put(c, hm.get(c)+1);
            }else{
                hm.put(c,1);
            }
        }
        int count=0;
        int start=0;
        int minLeft=0;
        int minLen= Integer.MAX_VALUE; // Minimum Window Substring

        for(int i=0;i<s.length(); i++){
            if(hm.containsKey(s.charAt(i))){
                hm.put(s.charAt(i), hm.get(s.charAt(i))-1); // count-1
               if( hm.get(s.charAt(i))>=0){
                count++;
               }
            }
           
            while(count == t.length()){ // eligible window
            // save length
             if(minLen > i-start+1){
                minLen = i-start+1;
                minLeft = start;
             }
            // remove
                 if (hm.containsKey(s.charAt(start))) {
                    hm.put(s.charAt(start), hm.get(s.charAt(start)) + 1);
                    if (hm.get(s.charAt(start)) > 0) {
                        count--;
                    }
                  }
                start++;

           }
        }
     return minLen == Integer.MAX_VALUE ? "" : s.substring(minLeft, minLeft + minLen);  
    }
}
